"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgJestCompiler = void 0;
const node_os_1 = __importDefault(require("node:os"));
const node_path_1 = __importDefault(require("node:path"));
const ts_jest_1 = require("ts-jest");
const jit_transform_1 = require("../transformers/jit_transform");
const replace_resources_1 = require("../transformers/replace-resources");
class NgJestCompiler extends ts_jest_1.TsCompiler {
    constructor(configSet, jestCacheFS) {
        super(configSet, jestCacheFS);
        this.configSet = configSet;
        this.jestCacheFS = jestCacheFS;
        this._libSourceFileCache = new Map();
        this._logger.debug('created NgJestCompiler');
        this._defaultLibDirPath = node_path_1.default.dirname(this._ts.getDefaultLibFilePath(this._compilerOptions));
    }
    _transpileOutput(fileContent, filePath) {
        var _a;
        const scriptTarget = (_a = this._compilerOptions.target) !== null && _a !== void 0 ? _a : this._ts.ScriptTarget.Latest;
        const sourceFile = this._ts.createSourceFile(filePath, fileContent, scriptTarget);
        const compilerHost = {
            getSourceFile: (fileName) => {
                var _a;
                if (fileName === node_path_1.default.normalize(filePath)) {
                    return sourceFile;
                }
                let libSourceFile = this._libSourceFileCache.get(fileName);
                if (!libSourceFile) {
                    const libFilePath = node_path_1.default.join(this._defaultLibDirPath, fileName);
                    const libFileContent = (_a = this._ts.sys.readFile(libFilePath)) !== null && _a !== void 0 ? _a : '';
                    if (libFileContent) {
                        libSourceFile = this._ts.createSourceFile(fileName, libFileContent, scriptTarget);
                        this._libSourceFileCache.set(fileName, libSourceFile);
                    }
                }
                return libSourceFile;
            },
            writeFile: () => { },
            getDefaultLibFileName: () => 'lib.d.ts',
            useCaseSensitiveFileNames: () => false,
            getCanonicalFileName: (fileName) => fileName,
            getCurrentDirectory: () => '',
            getNewLine: () => node_os_1.default.EOL,
            fileExists: (fileName) => fileName === filePath,
            readFile: () => '',
            directoryExists: () => true,
            getDirectories: () => [],
        };
        this.program = this._ts.createProgram([filePath], this._compilerOptions, compilerHost);
        return this._ts.transpileModule(fileContent, {
            fileName: filePath,
            transformers: this._makeTransformers(this.configSet.resolvedTransformers),
            compilerOptions: this._compilerOptions,
            reportDiagnostics: this.configSet.shouldReportDiagnostics(filePath),
        });
    }
    _makeTransformers(customTransformers) {
        var _a;
        const allTransformers = super._makeTransformers(customTransformers);
        return Object.assign(Object.assign(Object.assign({}, allTransformers.after), allTransformers.afterDeclarations), { before: [
                ...((_a = allTransformers.before) !== null && _a !== void 0 ? _a : []),
                (0, replace_resources_1.replaceResources)(this.program),
                (0, jit_transform_1.angularJitApplicationTransform)(this.program),
            ] });
    }
}
exports.NgJestCompiler = NgJestCompiler;
